// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  mealPlans             MealPlan[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // fields는 종속될 모델의 값을 담을 필드, references는 종속될 모델의 값
  // 즉 Account 모델의 userId는 User 모델의 id값
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// 끼니별 단위수 계산을 위한 정보

enum Gender {
  WOMEN
  MAN
}

enum ActiveLevel {
  LIGHT
  MODERATE
  INTENSE
}

enum PregnancyPeriod {
  FIRST
  SECOND
  THIRD
  LACTATION
}

enum ObesityDegree {
  UNDER
  NORMAL
  OVER
}

model MealPlan {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  calcBasicInfo   CalcBasicInfo?
  nutrientRatio   NutrientRatio?
  dayExchangeUnit DayExchangeUnit?
  mealUnits       MealUnit[]
  title           String?          @db.VarChar(30)
  createdAt       DateTime         @default(now())
}

model CalcBasicInfo {
  id                 String          @id @default(cuid())
  mealPlanId         String          @unique
  gender             Gender          @default(WOMEN)
  age                Int
  height             Int
  weight             Float
  is_pregnant        Boolean         @default(true)
  pregnancy_period   PregnancyPeriod @default(FIRST)
  active_level       ActiveLevel     @default(LIGHT)
  standard_weight    Float
  bmi                Float
  obesity_degree     ObesityDegree
  energy_requirement Int
  created_at         DateTime

  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}

model NutrientRatio {
  id            String   @id @default(cuid())
  mealPlanId    String   @unique
  carbo_ratio   Int
  protein_ratio Int
  fat_ratio     Int
  mealPlan      MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}

model DayExchangeUnit {
  id                 String   @id @default(cuid())
  mealPlanId         String   @unique
  milk_whole         Int
  milk_low_fat       Int
  vegetables         Int
  fruits             Int
  grains             Int
  protein_low_fat    Int
  protein_medium_fat Int
  protein_high_fat   Int
  fats               Int
  mealPlan           MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}

model MealUnit {
  id             String   @id @default(cuid())
  mealPlanId     String
  sort           Int
  total          Int
  morning        Int
  morningSnack   Int
  lunch          Int
  afternoonSnack Int
  dinner         Int
  mealPlan       MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
}
